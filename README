squares
=======

Which numbers cannot be formed as a sum of 2 squares?

i.e. what n cannot be expressed

    n = a^2 + b^2

for integer a,b?

This is an exercise in scheme.

Brute force algorithm:
======================

Individually, a and b must both be smaller than n. So we could just check all
integers smaller than n, or use some symmetry arguments to halve the number.
If we brutally check all integers a in (0,n) and b in (0,n), this will take
O(n^2) time.

This is silly, though, because the largest number that a could be (if b was
zero) is sqrt(n), which is much smaller than n when n is large.

Less brutal algorithm:
======================

So a better method would be to check all the integers in a circle of radius
sqrt(n) around zero. The area of this (quarter or eighth) of a circle is
proportional to n: so this could take O(n) time. That's quite good.

So this slightly better algorithm could go:
    * generate a list of all pairs of integers with a^2+b^2 <= n
    * eliminate all entries that satisfy a^2+b^2 < n
    * get the length of this list.
    * if it is zero, print n.

The smartest algorithm I could think of:
========================================

Generate a list of integers that are very close to the edge of the circle
(all within 2 steps, taxicab distance).

Start at (x,0), with x = floor(sqrt(n)). Face east (1,0).

    Define height function h = x^2+y^2 - n.
    Each turn, take one step forward and change direction as follows:
    While function < 0 turn right, else turn left.
    When y>x, stop adding candidates.

Then, check this list of candidates for hits.

Because this new list consists only of pairs near the edge of the circle, it
should run in O(sqrt(n)) time. There is a hard lower bound on the number of
candidates (because of the taxicab geometry) of sqrt(2)*sqrt(n).

The worst-case scenario is if it does an unecessary loop outside the circle
for each case on the edge. If this happens, the walker will visit
4*sqrt(2)*sqrt(n) candidates.

Notes:
  * The list of squares to visit is indeed O(sqrt(n)): asymptotically it is
    VERY close to 2*sqrt(n) exactly, not sure why.
  * The generated list of integers that can't be written as the sum of two 
    squares that agrees with the literature on OEIS.
  * The visualisation also works for the generated walks. The lines could
    possibly be cleaned up: need to brush up on my postscript specification.

  * I now have a proof that the walker exhausts all possible locations of
    zeroes of h on the lattice if the level sets of the height function:
        1. Do not have concavities wider than sqrt(2) times the lattice
           spacing and deeper than 1/sqrt(2) times the lattice spacing
        2. Do not have "necks" narrower than sqrt(2) times the lattice spacing
  * For the specific problem at hand (h = a^2 + b^2 - n) and related problems,
    it is sufficient that
        1. Level sets are convex (they are circles so this is fine)
        2. n>1 (n=1 is trivial so this is fine)
  * Condition 2 is actually too strong, because this algorithm visits all the
    possible zeroes for n=1 anyway.

TODO: type up proof (it is combinatorial: the idea is that there is a finite
number of ways that zeroes of any h on the lattice can be missed, and these
ways correspond with "concavities" and "necks" of the curve h=0).
